def is_safe(graph, v, color, c):
    for neighbor in graph[v]:
        if color[neighbor] == c:
            return False
    return True

def graph_coloring_backtrack(graph, color, v, K, N):
    if v == N:
        return True
    
    for c in range(1, K + 1):
        if is_safe(graph, v, color, c):
            color[v] = c
            if graph_coloring_backtrack(graph, color, v + 1, K, N):
                return True
            color[v] = 0  
    
    return False

def solve_graph_coloring():
    N, M, K = map(int, input("Enter number of vertices, edges, and colors (separated by space): ").split())
    graph = {i: [] for i in range(N)}
    
    print(f"Enter {M} edges (each as two space-separated integers):")
    for _ in range(M):
        u, v = map(int, input().split())
        graph[u].append(v)
        graph[v].append(u)
    
    color = [0] * N
    
    if graph_coloring_backtrack(graph, color, 0, K, N):
        print(f"Coloring Possible with {K} Colors")
        print(f"Color Assignment: {color}")
    else:
        print(f"Coloring Not Possible with {K} Colors")

solve_graph_coloring()
